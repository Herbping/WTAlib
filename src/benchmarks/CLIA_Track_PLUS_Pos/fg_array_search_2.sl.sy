(set-logic LIA)
(synth-fun findIdx ( (x1 Int) (x2 Int) (k Int)) Int (
	(Start  Int (		NT1
		NT3
))
	(NT1  Int (		x1
		x2
		0
		k
		1
		(ite NT4 NT1 NT1)
))
	(NT3  Int (		(+ NT1 NT1)
		(ite NT4 NT3 NT1)
		(ite NT4 NT1 NT3)
		(ite NT7 NT1 NT1)
))
	(NT4  Bool (		(>= NT1 NT1)
		(and NT4 NT4)
))
	
	(NT7  Bool (		(>= NT3 NT1)
		(and NT7 NT4)
))

))
(declare-var x1 Int)
(declare-var x2 Int)
(declare-var k Int)
(constraint (= (findIdx 0 0 0 ) (ite (and (< 0 0 ) (< 0 0 ) ) 1 (ite (and (< 0 0 ) (> 0 0 ) ) 3 (ite (and (< 0 0 ) (and (< 0 0 ) (> 0 0 ) ) ) 2 0 ) ) ) ))
(constraint (= (findIdx (- 1) (- 1) (- 2) ) (ite (and (< (- 1) (- 1) ) (< (- 2) (- 1) ) ) 1 (ite (and (< (- 1) (- 1) ) (> (- 2) (- 1) ) ) 3 (ite (and (< (- 1) (- 1) ) (and (< (- 2) (- 1) ) (> (- 2) (- 1) ) ) ) 2 0 ) ) ) ))
(constraint (= (findIdx 0 2 1 ) (ite (and (< 0 2 ) (< 1 0 ) ) 1 (ite (and (< 0 2 ) (> 1 2 ) ) 3 (ite (and (< 0 2 ) (and (< 1 2 ) (> 1 0 ) ) ) 2 0 ) ) ) ))
(constraint (= (findIdx (- 2) (- 1) (- 3) ) (ite (and (< (- 2) (- 1) ) (< (- 3) (- 2) ) ) 1 (ite (and (< (- 2) (- 1) ) (> (- 3) (- 1) ) ) 3 (ite (and (< (- 2) (- 1) ) (and (< (- 3) (- 1) ) (> (- 3) (- 2) ) ) ) 2 0 ) ) ) ))
(constraint (= (findIdx (- 1) 0 1 ) (ite (and (< (- 1) 0 ) (< 1 (- 1) ) ) 1 (ite (and (< (- 1) 0 ) (> 1 0 ) ) 3 (ite (and (< (- 1) 0 ) (and (< 1 0 ) (> 1 (- 1) ) ) ) 2 0 ) ) ) ))
(check-synth)