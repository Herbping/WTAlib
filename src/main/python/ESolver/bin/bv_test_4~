(set-logic BV)
(define-fun E ((x (BitVec 8))) (BitVec 8) (ite (bvule x #x19) (bvadd x #x41) (
						ite (bvule x #x33) (bvadd x #x47) (
							ite (bvule x #x3d) (bvsub x #x04) (
								ite (= x #x3e) #x2b #x2f)))))
(define-fun B ((h (BitVec 8)) (l (BitVec 8)) (v (BitVec 8))) (BitVec 8)
   (bvlshr (bvshl v (bvsub #x07 h)) (bvsub #x07 (bvsub h l)))
)

(define-fun d11 ((x (BitVec 8))) Bool (bvule x #x5a))
(define-fun d12 ((x (BitVec 8))) Bool (bvuge x #x41))
(define-fun d21 ((x (BitVec 8))) Bool (bvuge x #x61))
(define-fun d22 ((x (BitVec 8))) Bool (bvule x #x7a))
(define-fun d31 ((x (BitVec 8))) Bool (bvuge x #x30))
(define-fun d32 ((x (BitVec 8))) Bool (bvule x #x39))
(define-fun d4 ((x (BitVec 8))) Bool (= x #x2b))
(define-fun d5 ((x (BitVec 8))) Bool (= x #x2f))

(define-fun d ((x (BitVec 8))) Bool (or (and (d11 x) (d12 x))
					( or	(and (d21 x) (d22 x))
						( or (and (d31 x) (d32 x))
						     ( or (d4 x)
							  (d5 x))
					))))

(define-fun inputdomain ((x (BitVec 8))) Bool (bvule x #x3f) )


(synth-fun D ((x (BitVec 8))) (BitVec 8)
    ((Start (BitVec 8) ((ite StartBool Start Start) 
			(bvadd Start Start)
			(bvsub Start Start)
                        x 	        #x00 #x01 #x02 #x03 #x04 #x05 #x06 #x07 #x08 #x09 #x0A #x0B #x0C #x0D #x0E #x0F #x10 #x20 #x30 #x40 #x50 #x60 #x70 #x80 #x90 #xA0 #xB0 #xC0  #xD0 #xE0 #xF0))
	(StartBool Bool (
                  (not StartBool)
                  (bvule Start Start)
                  (= Start Start)))

	
))

(declare-var x (BitVec 8))
(constraint (or (not (inputdomain x)) (= (D (E x)) x)))
(check-synth)    


